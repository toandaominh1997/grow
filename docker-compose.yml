version: "3.9"
services:
  # front end
  # reactjs:
  #   build: "./src/frontend/reactjs"
  #   restart: on-failure
  #   ports:
  #     - "3001:3001"
  #blockchain:
  #  build: "./src/blockchain"
  #  restart: on-failure
  #  ports:
  #    - "2345:2345"
  #  volumes:
  #    - ./src/blockchain:/code
  # nginx:
  #   container_name: api-gateway
  #   build: ./services/nginx
  #   restart: on-failure
  #   ports:
  #     - "11111:11111"
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./services/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
  # django:
  #   container_name: django-server
  #   build: "./src/backend/django"
  #   restart: on-failure
  #   ports:
  #     - "8000:8000"
  #     - "8001:8001"
  #   volumes:
  #     - ./src/backend/django:/code
  #   depends_on:
  #     - postgres
  #     - redis

  # fastapi:
  #   container_name: fastapi-server
  #   build: "./src/backend/fastapi"
  #   restart: on-failure
  #   ports:
  #     - "1234:1234"
  #   volumes:
  #     - ./src/backend/fastapi:/code
  #   depends_on:
  #     - postgres
  #     - redis
  # postgres:
  #   container_name: postgres-database
  #   build: "./services/postgres"
  #   restart: on-failure
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - 'postgresql_data:/bitnami/postgresql'
  # pgadmin:
  #   container_name: pgadmin_container
  #   image: dpage/pgadmin4
  #   restart: always
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@admin.com
  #     PGADMIN_DEFAULT_PASSWORD: root
  #     PGADMIN_CONFIG_SERVER_MODE: 'False'
  #   volumes:
  #     - pgadmin_data:/var/lib/pgadmin
  #
  #   ports:
  #     - "5050:80"
  redis:
    container_name: redis-database
    image: redis:latest
    ports:
      - "6379:6379"
  #mariadb:
  #  build: "./services/mariadb"
  #  ports:
  #    - "3808:3808"
  #  restart: "always"
  # memcached:
  #   container_name: memcached-database
  #   build: ./services/memcached
  #   ports:
  #     - "11211:11211"
  mongo:
    container_name: mongo-database
    build: ./services/mongo
    ports:
      - "27017:27017"
    volumes:
      - 'mongodb_data:/bitnami/mongodb'

  # couchdb:
  #   container_name: couchdb-database
  #   build: ./services/couchdb
  #   ports:
  #     - "5984:5984"
  #   environment:
  #     - COUCHDB_USER=admin
  #     - COUCHDB_PASSWORD=admin
  #   volumes:
  #     - couchdb_data:/opt/couchdb/data
    
  cassandra:
    container_name: cassandra-database
    build: ./services/cassandra
    ports:
      - '7000:7000'
      - '9042:9042'
    volumes:
      - 'cassandra_data:/bitnami'
    environment:
      - CASSANDRA_CLUSTER_NAME=cassandra-cluster
      - CASSANDRA_SEEDS=cassandra
      - CASSANDRA_PASSWORD_SEEDER=yes
      - CASSANDRA_PASSWORD=cassandra
  # Elastic Stack
  elasticsearch:
    build: ./services/elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - 'elasticsearch_data:/bitnami/elasticsearch/data'
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
  # logstash:
  #   build: ./services/logstash
  #   ports:
  #     - "8080:8090"
  #   volumes:
  #     - logstash_data:/bitnami
  # kibana:
  #   build: ./services/kibana
  #   ports:
  #     - "5601:5601"
  #   volumes:
  #     - "kibana_data:/bitnami/kibana"
  #   depends_on:
  #     - elasticsearch
  #
  # flaskapp:
  #   container_name: flaskapp
  #   build: ./src/backend/prometheus
  #   restart: on-failure
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     - prometheus
  #
  # prometheus:
  #   container_name: prometheus
  #   build: ./services/prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./services/prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml
  # grafana:
  #   container_name: grafana
  #   build: ./services/grafana
  #   ports:
  #     - "3001:3000"
  # jenkins:
  #   container_name: jenkins
  #   build: ./services/jenkins
  #   ports:
  #     - "33333:8080"
  #     - "50000:50000"
  #   volumes:
  #     - "jenkins_data:/var/jenkins_home"
  #
  minio:
    container_name: minio
    image: minio/minio:latest
    restart: always
    ports:
     - "9000:9000"
     - "9001:9001"
    volumes:
      - "minio_data:/data"
    environment:
      - MINIO_ROOT_USER=adminminio
      - MINIO_ROOT_PASSWORD=adminminio
    command: server /data --address 0.0.0.0:9000 --console-address ":9001"
  # kafka:
  #   container_name: kafka
  #   build: "./services/kafka"
  #   restart: always
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     - KAFKA_BROKER_ID=1
  #     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
  #     - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #   depends_on:
  #     - zookeeper
  # zookeeper:
  #   container_name: zookeeper
  #   image: docker.io/bitnami/zookeeper:latest
  #   restart: always
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes
  # neo4j:
  #   image: docker.io/bitnami/neo4j:4
  #   ports:
  #     - '7474:7474'
  #     - '7473:7473'
  #     - '7687:7687'
  #   volumes:
  #     - 'neo4j_data:/bitnami'
volumes:
  minio_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  elasticsearch_data:
    driver: local
  logstash_data:
    driver: local
  kibana_data:
    driver: local
  neo4j_data:
    driver: local
  postgresql_data:
    driver: local
  pgadmin_data:
    driver: local
  mongodb_data:
    driver: local
  couchdb_data:
    driver: local
  cassandra_data:
    driver: local
  sonarqube_data:
    driver: local
  jenkins_data:
    driver: local
networks:
  default:
    name: tonne
    external: true
